//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPIAppsistencia
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class appsistenciaDBEntities : DbContext
    {
        public appsistenciaDBEntities()
            : base("name=appsistenciaDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Asistente> Asistente { get; set; }
        public virtual DbSet<Barreras> Barreras { get; set; }
        public virtual DbSet<BarrerasXusuario> BarrerasXusuario { get; set; }
        public virtual DbSet<Calificaciones> Calificaciones { get; set; }
        public virtual DbSet<ContratosXAsistente> ContratosXAsistente { get; set; }
        public virtual DbSet<DetallesXContrato> DetallesXContrato { get; set; }
        public virtual DbSet<HabilidadesXAsistente> HabilidadesXAsistente { get; set; }
        public virtual DbSet<Identificacion> Identificacion { get; set; }
        public virtual DbSet<Licencias> Licencias { get; set; }
        public virtual DbSet<Quejas> Quejas { get; set; }
        public virtual DbSet<TipoPagoXAsistente> TipoPagoXAsistente { get; set; }
        public virtual DbSet<TiposPago> TiposPago { get; set; }
        public virtual DbSet<Transaccion> Transaccion { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual int spInsertarUsuario(string nombre, string primer_Apellido, string segundo_Apellido, string cedula, string genero, string telefono_FIjo, string celular_1, string celular_2, string identificacion, Nullable<int> tipo_Identificacion, Nullable<int> edad, string direccion, string email, string password, string foto)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var primer_ApellidoParameter = primer_Apellido != null ?
                new ObjectParameter("primer_Apellido", primer_Apellido) :
                new ObjectParameter("primer_Apellido", typeof(string));
    
            var segundo_ApellidoParameter = segundo_Apellido != null ?
                new ObjectParameter("segundo_Apellido", segundo_Apellido) :
                new ObjectParameter("segundo_Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var generoParameter = genero != null ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(string));
    
            var telefono_FIjoParameter = telefono_FIjo != null ?
                new ObjectParameter("telefono_FIjo", telefono_FIjo) :
                new ObjectParameter("telefono_FIjo", typeof(string));
    
            var celular_1Parameter = celular_1 != null ?
                new ObjectParameter("celular_1", celular_1) :
                new ObjectParameter("celular_1", typeof(string));
    
            var celular_2Parameter = celular_2 != null ?
                new ObjectParameter("celular_2", celular_2) :
                new ObjectParameter("celular_2", typeof(string));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("identificacion", identificacion) :
                new ObjectParameter("identificacion", typeof(string));
    
            var tipo_IdentificacionParameter = tipo_Identificacion.HasValue ?
                new ObjectParameter("tipo_Identificacion", tipo_Identificacion) :
                new ObjectParameter("tipo_Identificacion", typeof(int));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("edad", edad) :
                new ObjectParameter("edad", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarUsuario", nombreParameter, primer_ApellidoParameter, segundo_ApellidoParameter, cedulaParameter, generoParameter, telefono_FIjoParameter, celular_1Parameter, celular_2Parameter, identificacionParameter, tipo_IdentificacionParameter, edadParameter, direccionParameter, emailParameter, passwordParameter, fotoParameter);
        }
    
        public virtual int spInsertarUsuarioTest(string cedula, string genero)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var generoParameter = genero != null ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarUsuarioTest", cedulaParameter, generoParameter);
        }
    
        public virtual ObjectResult<spSelectUsuario_Result> spSelectUsuario(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectUsuario_Result>("spSelectUsuario", iDParameter);
        }
    }
}
